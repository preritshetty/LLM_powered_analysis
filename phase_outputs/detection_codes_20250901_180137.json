{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "This code detects rows where both Window Seat and Aisle Seat are marked as true, indicating a contradictory situation. It flags these rows as having inconsistent values in the Window Seat and Aisle Seat columns.",
      "test_description": "To test this detection, create sample data where both Window Seat and Aisle Seat are marked as true in the same row. Apply the detection code and verify that the 'flag_status' column is updated for those rows.",
      "safety_notes": "Ensure that the normalization of boolean values covers all possible true representations to avoid missing any contradictory cases."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) & df['Departure Date/Time'].notna() & df['Arrival Date/Time'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure date/time is after the arrival date/time, which violates the business logic. It uses pandas to_datetime function to convert the date/time columns and compares them to identify the issue.",
      "test_description": "Test by inserting a row where Departure Date/Time is after Arrival Date/Time and running the detection code. The flag_status should be updated to 2 for that row.",
      "safety_notes": "Ensure that the date/time columns are in the correct format before running this detection code to avoid any conversion errors."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(df['Departure Date/Time'].isna() | df['Departure Date/Time'].astype(str).str.strip() == '' | df['Arrival Date/Time'].isna() | df['Arrival Date/Time'].astype(str).str.strip() == '' | df['Status'].isna() | df['Status'].astype(str).str.strip() == ''), 'flag_status'] |= 4",
      "explanation": "This code flags rows where critical information (Departure Date/Time, Arrival Date/Time, Status) is missing or empty.",
      "test_description": "Check if the code correctly flags rows where Departure Date/Time, Arrival Date/Time, or Status is missing or empty.",
      "safety_notes": "Ensure that the columns 'Departure Date/Time', 'Arrival Date/Time', and 'Status' are correctly named in the DataFrame and that missing or empty values indicate critical information is not provided."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-09-01T18:01:37.671094",
  "llm_model": "gpt-3.5-turbo"
}