{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "This code detects rows where both Window Seat and Aisle Seat are marked as true, indicating a contradictory situation. It flags these rows for further investigation.",
      "test_description": "To test this detection, check rows where both Window Seat and Aisle Seat are marked as true. After running the code, the 'flag_status' column should be updated to 1 for those rows.",
      "safety_notes": "Ensure that the normalization of boolean values is consistent and covers all possible true representations to avoid missing any contradictory cases."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) & df['Departure Date/Time'].notna() & df['Arrival Date/Time'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure date/time is after the arrival date/time, indicating a violation of business logic.",
      "test_description": "Test by checking if the 'flag_status' is flagged as 2 for rows where Departure Date/Time is greater than Arrival Date/Time.",
      "safety_notes": "Ensure that the date/time columns are properly formatted and contain valid date/time values for accurate detection."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(df['Departure Date/Time'].isna() | df['Arrival Date/Time'].isna() | df['Status'].isna()), 'flag_status'] |= 4",
      "explanation": "This code flags rows where critical information (Departure Date/Time, Arrival Date/Time, Status) is missing.",
      "test_description": "Check if the 'flag_status' column is updated to 4 for rows with missing Departure Date/Time, Arrival Date/Time, or Status.",
      "safety_notes": "Ensure that the 'Departure Date/Time', 'Arrival Date/Time', and 'Status' columns are correctly identified and that missing values are accurately detected."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-31T22:55:26.334523",
  "llm_model": "gpt-3.5-turbo"
}