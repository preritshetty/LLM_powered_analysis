{
  "execution_summary": {
    "total_rows": 10000,
    "flagged_rows": 8715,
    "clean_rows": 1285,
    "flagged_percentage": 87.15,
    "total_detections": 14024,
    "execution_time_seconds": 0.04,
    "successful_codes": 4,
    "failed_codes": 0,
    "success_rate": 100.0,
    "timestamp": "2025-09-01T18:06:09.469069"
  },
  "individual_results": [
    {
      "flag_value": 1,
      "success": true,
      "rows_detected": 2421,
      "explanation": "This code detects rows where both Window Seat and Aisle Seat are marked as true, indicating a contradictory situation. It flags these rows for further investigation.",
      "code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "error": null
    },
    {
      "flag_value": 2,
      "success": true,
      "rows_detected": 4912,
      "explanation": "This code detects rows where the departure datetime is after the arrival datetime, indicating a business logic violation.",
      "code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 2",
      "error": null
    },
    {
      "flag_value": 4,
      "success": true,
      "rows_detected": 0,
      "explanation": "This code detects rows where negative loyalty points are found in the 'Loyalty Points' column.",
      "code": "df.loc[(pd.to_numeric(df['Loyalty Points'], errors='coerce') < 0) & pd.to_numeric(df['Loyalty Points'], errors='coerce').notna(), 'flag_status'] |= 4",
      "error": null
    },
    {
      "flag_value": 8,
      "success": true,
      "rows_detected": 6691,
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "error": null
    }
  ],
  "flag_breakdown": {
    "individual_flags": {
      "1": 2421,
      "2": 4912,
      "8": 6691
    },
    "combined_flags": {
      "1": 382,
      "10": 2512,
      "9": 854,
      "8": 2567,
      "11": 758,
      "2": 1215,
      "3": 427
    },
    "flag_combinations": [
      {
        "flag_status": 1,
        "individual_flags": [
          1
        ],
        "flag_description": "Flags 1",
        "row_count": 382,
        "binary_representation": "1"
      },
      {
        "flag_status": 10,
        "individual_flags": [
          2,
          8
        ],
        "flag_description": "Flags 2+8",
        "row_count": 2512,
        "binary_representation": "1010"
      },
      {
        "flag_status": 9,
        "individual_flags": [
          1,
          8
        ],
        "flag_description": "Flags 1+8",
        "row_count": 854,
        "binary_representation": "1001"
      },
      {
        "flag_status": 8,
        "individual_flags": [
          8
        ],
        "flag_description": "Flags 8",
        "row_count": 2567,
        "binary_representation": "1000"
      },
      {
        "flag_status": 11,
        "individual_flags": [
          1,
          2,
          8
        ],
        "flag_description": "Flags 1+2+8",
        "row_count": 758,
        "binary_representation": "1011"
      },
      {
        "flag_status": 2,
        "individual_flags": [
          2
        ],
        "flag_description": "Flags 2",
        "row_count": 1215,
        "binary_representation": "10"
      },
      {
        "flag_status": 3,
        "individual_flags": [
          1,
          2
        ],
        "flag_description": "Flags 1+2",
        "row_count": 427,
        "binary_representation": "11"
      }
    ]
  }
}