{
  "execution_summary": {
    "total_rows": 10000,
    "flagged_rows": 10000,
    "clean_rows": 0,
    "flagged_percentage": 100.0,
    "total_detections": 24024,
    "execution_time_seconds": 0.16,
    "successful_codes": 4,
    "failed_codes": 0,
    "success_rate": 100.0,
    "timestamp": "2025-09-01T16:16:43.875076"
  },
  "individual_results": [
    {
      "flag_value": 1,
      "success": true,
      "rows_detected": 2421,
      "explanation": "This code detects rows where both Window Seat and Aisle Seat are marked as true, indicating a contradictory situation. It flags these rows as having contradictory values in the Window Seat and Aisle Seat columns.",
      "code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "error": null
    },
    {
      "flag_value": 2,
      "success": true,
      "rows_detected": 10000,
      "explanation": "This code detects conflicts between the 'Status' column and the actual departure and arrival times by comparing them. If the 'Status' is not null and the 'Departure Datetime' does not match 'Departure Time' or 'Arrival Datetime' does not match 'Arrival Time', it flags the row.",
      "code": "df.loc[(df['Status'].notna()) & ((pd.to_datetime(df['Departure Datetime'], errors='coerce') != pd.to_datetime(df['Departure Time'], errors='coerce')) | (pd.to_datetime(df['Arrival Datetime'], errors='coerce') != pd.to_datetime(df['Arrival Time'], errors='coerce'))), 'flag_status'] |= 2",
      "error": null
    },
    {
      "flag_value": 4,
      "success": true,
      "rows_detected": 4912,
      "explanation": "This code detects rows where the departure datetime is after the arrival datetime, which is a business logic violation.",
      "code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 4",
      "error": null
    },
    {
      "flag_value": 8,
      "success": true,
      "rows_detected": 6691,
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "error": null
    }
  ],
  "flag_breakdown": {
    "individual_flags": {
      "1": 2421,
      "2": 10000,
      "4": 4912,
      "8": 6691
    },
    "combined_flags": {
      "3": 382,
      "2": 1285,
      "14": 2512,
      "11": 854,
      "10": 2567,
      "15": 758,
      "6": 1215,
      "7": 427
    },
    "flag_combinations": [
      {
        "flag_status": 3,
        "individual_flags": [
          1,
          2
        ],
        "flag_description": "Flags 1+2",
        "row_count": 382,
        "binary_representation": "11"
      },
      {
        "flag_status": 2,
        "individual_flags": [
          2
        ],
        "flag_description": "Flags 2",
        "row_count": 1285,
        "binary_representation": "10"
      },
      {
        "flag_status": 14,
        "individual_flags": [
          2,
          4,
          8
        ],
        "flag_description": "Flags 2+4+8",
        "row_count": 2512,
        "binary_representation": "1110"
      },
      {
        "flag_status": 11,
        "individual_flags": [
          1,
          2,
          8
        ],
        "flag_description": "Flags 1+2+8",
        "row_count": 854,
        "binary_representation": "1011"
      },
      {
        "flag_status": 10,
        "individual_flags": [
          2,
          8
        ],
        "flag_description": "Flags 2+8",
        "row_count": 2567,
        "binary_representation": "1010"
      },
      {
        "flag_status": 15,
        "individual_flags": [
          1,
          2,
          4,
          8
        ],
        "flag_description": "Flags 1+2+4+8",
        "row_count": 758,
        "binary_representation": "1111"
      },
      {
        "flag_status": 6,
        "individual_flags": [
          2,
          4
        ],
        "flag_description": "Flags 2+4",
        "row_count": 1215,
        "binary_representation": "110"
      },
      {
        "flag_status": 7,
        "individual_flags": [
          1,
          2,
          4
        ],
        "flag_description": "Flags 1+2+4",
        "row_count": 427,
        "binary_representation": "111"
      }
    ]
  }
}